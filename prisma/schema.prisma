// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Province {
  id     String @id @default(uuid())
  name   String @unique
  cities City[]

  @@map("provinces")
}

model City {
  id         String    @id @default(uuid())
  name       String
  provinceId String
  province   Province  @relation(fields: [provinceId], references: [id])
  listings   Listing[]
  imageUrl   String?
  featured   Boolean   @default(false)

  @@map("cities")
}

model PaymentMethod {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  description           String?
  active                Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  bookings              Booking[]
  listingPaymentMethods ListingPaymentMethod[]

  @@map("paymentMethods")
}

model User {
  email         String         @id
  password      String
  fullName      String
  phoneNumber   String?
  avatarUrl     String?
  active        Boolean        @default(true)
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  bookings      Booking[]
  favorites     Favorite[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  Listing       Listing[]

  @@map("users")
}

model Listing {
  id            String    @id @default(uuid())
  title         String
  description   String    @db.Text
  address       String
  pricePerNight Float
  propertyType  String
  rooms         Int
  bathrooms     Int
  beds          Int
  petFriendly   Boolean
  maxGuests     Int
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  cityId String
  city   City   @relation(fields: [cityId], references: [id])

  userEmail String
  user      User   @relation(fields: [userEmail], references: [email])

  amenities             ListingAmenity[]
  images                Image[]
  listingPaymentMethods ListingPaymentMethod[]
  bookings              Booking[]
  favorites             Favorite[]
  reviews               Review[]

  @@map("listings")
}

model ListingAmenity {
  listingId String
  amenityId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([listingId, amenityId])
  @@map("listingAmenities")
}

model Amenity {
  id        String           @id @default(uuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  listings  ListingAmenity[]

  @@map("amenities")
}

model Booking {
  id          String    @id @default(uuid())
  childAmount Int
  adultAmount Int
  totalPrice  Float
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  startDate   DateTime
  endDate     DateTime

  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  listingId       String
  listing         Listing       @relation(fields: [listingId], references: [id])
  userEmail       String
  user            User          @relation(fields: [userEmail], references: [email])

  @@map("bookings")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])

  @@map("images")
}

model Favorite {
  id        String  @id @default(uuid())
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@unique([userEmail, listingId])
  @@map("favorites")
}

model Review {
  id        String  @id @default(uuid())
  rating    Int
  comment   String  @db.Text
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, listingId])
  @@map("reviews")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(512)
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refreshTokens")
}

model ListingPaymentMethod {
  listingId       String
  paymentMethodId String
  createdAt       DateTime      @default(now())
  listing         Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@id([listingId, paymentMethodId])
  @@map("listingPaymentMethods")
}
